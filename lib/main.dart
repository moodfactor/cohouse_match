import 'package:cohouse_match/services/presence_service.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cohouse_match/firebase_options.dart'; // This will be generated by FlutterFire CLI
import 'package:provider/provider.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cohouse_match/services/auth_service.dart';
import 'package:cohouse_match/screens/wrapper.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(const MyApp());
}

final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}


class _MyAppState extends State<MyApp> with WidgetsBindingObserver {
  final PresenceService _presenceService = PresenceService();
  late final Stream<User?> _authStream;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _authStream = FirebaseAuth.instance.authStateChanges();
    _authStream.listen((User? user) {
      if (user != null) {
        _presenceService.setUserOnline(user.uid);
      }
    });
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    final currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null) return;

    if (kIsWeb) {
      // For web, rely more on onDisconnect. Only explicitly set online on resume.
      if (state == AppLifecycleState.resumed) {
        _presenceService.setUserOnline(currentUser.uid);
      }
    } else {
      // For mobile/desktop, use full lifecycle management
      if (state == AppLifecycleState.resumed) {
        _presenceService.setUserOnline(currentUser.uid);
      } else {
        _presenceService.setUserOffline(currentUser.uid);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        Provider<AuthService>(create: (_) => AuthService()),
        Provider<PresenceService>.value(value: _presenceService),
        StreamProvider<User?>.value(
          value: _authStream,
          initialData: null,
        ),
      ],
      child: MaterialApp(
        navigatorKey: navigatorKey,
        title: 'CohouseMatch',
        theme: ThemeData(
          primarySwatch: Colors.blue,
        ),
        home: const Wrapper(),
      ),
    );
  }
}